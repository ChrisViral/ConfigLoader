using System;
using System.Collections.Generic;
using System.Linq;
using ConfigLoader.Attributes;
using ConfigLoaderGenerator.Extensions;
using ConfigLoaderGenerator.Metadata;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

/* ConfigLoader is distributed under CC BY-NC-SA 4.0 INTL (https://creativecommons.org/licenses/by-nc-sa/4.0/).                           *\
 * You are free to redistribute, share, adapt, etc. as long as the original author (stupid_chris/Christophe Savard) is properly, clearly, *
\* and explicitly credited, that you do not use this material to a commercial use, and that you distribute it under the same license.     */

namespace ConfigLoaderGenerator;

/// <summary>
/// ConfigNode template source
/// </summary>
public class ConfigBuilder
{
    /// <summary>
    /// Generated file header
    /// </summary>
    private static readonly SyntaxTrivia AutoGeneratedComment = Comment("// <auto-generated />");

    /// <summary>
    /// Type to generate the source for
    /// </summary>
    private TypeDeclarationSyntax TypeSyntax { get; }
    /// <summary>
    /// Type symbol
    /// </summary>
    private INamedTypeSymbol Type { get; }
    /// <summary>
    /// <see cref="ConfigObjectAttribute"/> data
    /// </summary>
    private ConfigObjectMetadata Attribute { get; }
    /// <summary>
    /// Config fields data
    /// </summary>
    private List<ConfigFieldMetadata> Fields { get; } = [];
    /// <summary>
    /// Set of namespaces to use
    /// </summary>
    private HashSet<INamespaceSymbol> UsingNamespaces { get; } = new(UsingComparer.Comparer);

    /// <summary>
    /// Creates a new config generator template from the given context
    /// </summary>
    /// <param name="context">Context to create the template from</param>
    public ConfigBuilder(GeneratorSyntaxContext context)
    {
        this.TypeSyntax = (TypeDeclarationSyntax)context.Node;
        this.Type = context.SemanticModel.GetDeclaredSymbol(this.TypeSyntax)!;
        this.Attribute = new ConfigObjectMetadata(this.Type.GetAttribute<ConfigObjectAttribute>());

        foreach (ISymbol member in this.Type.GetMembers().Where(FilterMembers))
        {
            if (!member.TryGetAttribute<ConfigFieldAttribute>(out AttributeData? attribute)) continue;

            this.Fields.Add(new ConfigFieldMetadata(member, attribute!));
        }
    }

    /// <summary>
    /// Filters out valid members
    /// </summary>
    /// <param name="member">Member to filter</param>
    /// <returns><see langword="true"/> if the member is valid, otherwise <see langword="false"/></returns>
    private static bool FilterMembers(ISymbol member) => member.Kind switch
    {
        SymbolKind.Field    => member is IFieldSymbol { IsReadOnly: false, IsConst: false, IsStatic: false },
        SymbolKind.Property => member is IPropertySymbol { IsReadOnly: false, IsWriteOnly: false, IsAbstract: false, IsStatic: false, IsIndexer: false },
        _                   => false
    };

    /// <summary>
    /// Generate the source file for the given template
    /// </summary>
    /// <returns>A tuple containing the generated file name and full file source</returns>
    public (string fileName, string source) GenerateSource()
    {
        // Compilation root
        CompilationUnitSyntax root = CompilationUnit();

        // Declare the type we edit
        TypeDeclarationSyntax type = this.TypeSyntax switch
        {
            ClassDeclarationSyntax         => ClassDeclaration(this.TypeSyntax.Identifier),
            StructDeclarationSyntax        => StructDeclaration(this.TypeSyntax.Identifier),
            RecordDeclarationSyntax record => RecordDeclaration(record.ClassOrStructKeyword, record.Identifier),
            _                              => throw new InvalidOperationException($"Invalid generation type kind ({this.TypeSyntax.GetType().Name})")
        };
        type = type.WithModifiers(this.TypeSyntax.Modifiers);

        // Generate methods
        ParameterSyntax nodeParam = Parameter("node".Tokenize()).WithType("ConfigNode".AsIdentifier());
        MethodDeclarationSyntax loadMethod = MethodDeclaration(SyntaxKind.VoidKeyword.Type(), this.Attribute.LoadMethodName.Tokenize())
                                            .AddModifiers(this.Attribute.LoadAccessModifier)
                                            .AddParameterListParameters(nodeParam)
                                            .WithBody(Block());
        MethodDeclarationSyntax saveMethod = MethodDeclaration(SyntaxKind.VoidKeyword.Type(), this.Attribute.SaveMethodName.Tokenize())
                                            .AddModifiers(this.Attribute.SaveAccessModifier)
                                            .AddParameterListParameters(nodeParam)
                                            .WithBody(Block());

        // TODO: Generate method code

        // Add methods to type
        type = type.AddMembers(loadMethod, saveMethod);

        // Add namespace if needed
        MemberDeclarationSyntax topmostDeclaration = type;
        if (this.Type.ContainingNamespace is not null)
        {
            topmostDeclaration = NamespaceDeclaration(this.Type.ContainingNamespace.Name.AsIdentifier()).AddMembers(type);
        }

        // Add usings
        if (this.UsingNamespaces.Count > 0)
        {
            UsingDirectiveSyntax[] usingDirectives = this.UsingNamespaces
                                                         .OrderBy(u => u, UsingComparer.Comparer)
                                                         .Select(u => UsingDirective(u.Name.AsIdentifier()))
                                                         .ToArray();

            // Add header comment
            usingDirectives[0] = usingDirectives[0].WithLeadingTrivia(AutoGeneratedComment);
            root               = root.AddUsings(usingDirectives);
        }
        else
        {
            // Add header comment
            topmostDeclaration = topmostDeclaration.WithLeadingTrivia(AutoGeneratedComment);
        }

        // Add topmost member to root
        root = root.AddMembers(topmostDeclaration);

        // Output
        string lineFeed = CarriageReturnLineFeed.ToFullString();
        root = root.NormalizeWhitespace(eol: lineFeed);
        return ($"{this.Type.Name}.generated.cs", root.ToFullString() + lineFeed);
    }
}
