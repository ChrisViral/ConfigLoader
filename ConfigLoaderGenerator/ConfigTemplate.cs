using System.Text;
using ConfigLoaderGenerator.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

/* ConfigLoader is distributed under CC BY-NC-SA 4.0 INTL (https://creativecommons.org/licenses/by-nc-sa/4.0/).                           *\
 * You are free to redistribute, share, adapt, etc. as long as the original author (stupid_chris/Christophe Savard) is properly, clearly, *
\* and explicitly credited, that you do not use this material to a commercial use, and that you distribute it under the same license.     */

namespace ConfigLoaderGenerator;

public class ConfigTemplate
{
    private TypeDeclarationSyntax TypeSyntax { get; }

    public ConfigTemplate(GeneratorSyntaxContext context)
    {
        this.TypeSyntax = (TypeDeclarationSyntax)context.Node;
    }

    public (string fileName, string source) GenerateSource()
    {
        // File header
        StringBuilder sourceBuilder = new("// <auto-generated />\n");

        // Usings
        sourceBuilder.AppendLine("using UnityEngine;");

        // Namespace declaration if needed
        string @namespace = this.TypeSyntax.GetNamespace();
        if (!string.IsNullOrEmpty(@namespace))
        {
            sourceBuilder.AppendLine($"namespace {@namespace}");
            sourceBuilder.AppendLine("{");
        }

        // Type declaration
        sourceBuilder.AppendLine(this.TypeSyntax.GetFullTypeDeclaration());
        sourceBuilder.AppendLine("{");

        // Generated code
        sourceBuilder.AppendLine("""private void Foo(string message) => Debug.Log($"Generator says: {message}");""");

        // Close scopes
        sourceBuilder.AppendLine("}");
        if (!string.IsNullOrEmpty(@namespace))
        {
            sourceBuilder.AppendLine("}");
        }

        // Output
        string fileName = $"{this.TypeSyntax.Identifier.ValueText}.generated.cs";
        return (fileName, sourceBuilder.ToString());
    }
}
