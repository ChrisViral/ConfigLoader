using System.Collections.Generic;
using System.Linq;
using System.Text;
using ConfigLoaderGenerator.Extensions;
using ConfigLoaderGenerator.SourceBuilding.Scopes;
using ConfigLoaderGenerator.SourceBuilding.Statements;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

/* ConfigLoader is distributed under CC BY-NC-SA 4.0 INTL (https://creativecommons.org/licenses/by-nc-sa/4.0/).                           *\
 * You are free to redistribute, share, adapt, etc. as long as the original author (stupid_chris/Christophe Savard) is properly, clearly, *
\* and explicitly credited, that you do not use this material to a commercial use, and that you distribute it under the same license.     */

namespace ConfigLoaderGenerator.SourceBuilding;

/// <summary>
/// Source file builder helper
/// </summary>
/// ReSharper disable once SuggestBaseTypeForParameterInConstructor
public class SourceBuilder(INamedTypeSymbol type)
{
    /// <summary>
    /// Generated file header
    /// </summary>
    private const string AUTO_GENERATED = "// <auto-generated />\n";

    /// <summary>
    /// Generated file name
    /// </summary>
    public string FileName => $"{this.typeName}.generated.cs";

    private readonly string typeName = type.Name;
    private readonly HashSet<UsingStatement> usings = [];
    private readonly List<BaseScope> scopes = [];

    /// <summary>
    /// Adds a using statement to the source
    /// </summary>
    /// <param name="usingNamespace">Namespace to add as using statement for</param>
    /// <returns><see langword="true"/> if the using statement was successfully added, <see langword="false"/> otherwise</returns>
    public bool AddUsingStatement(INamespaceSymbol usingNamespace) => this.usings.Add(new UsingStatement(usingNamespace));

    /// <summary>
    /// Adds a namespace scope to the source and returns it
    /// </summary>
    /// <param name="namespaceSymbol">Namespace to add a scope for</param>
    /// <returns>The created <see cref="NamespaceScope"/></returns>
    public NamespaceScope AddNamespaceScope(INamespaceSymbol namespaceSymbol)
    {
        NamespaceScope namespaceScope = new(namespaceSymbol);
        this.scopes.Add(namespaceScope);
        return namespaceScope;
    }

    /// <summary>
    /// Adds a type scope to the source and returns it
    /// </summary>
    /// <param name="type">Type to add a scope for</param>
    /// <returns>The created <see cref="TypeScope"/></returns>
    public TypeScope AddTypeScope(TypeDeclarationSyntax type)
    {
        TypeScope typeScope = new(type);
        this.scopes.Add(typeScope);
        return typeScope;
    }

    /// <summary>
    /// Builds the source file and outputs it
    /// </summary>
    /// <returns>The resulting source file text</returns>
    public string BuildSource()
    {
        // Generate StringBuilder
        StringBuilder builder = new(AUTO_GENERATED);

        // Sort using statements then add them
        List<UsingStatement> sortedUsings = this.usings.ToList();
        sortedUsings.Sort();
        sortedUsings.ForEach(u => u.BuildStatement(builder));

        // Add all bundled scopes
        this.scopes.ForEach(s => s.BuildScope(builder));

        // Build the final source string and return
        return builder.ToString().NormalizeIndentation();
    }
}
