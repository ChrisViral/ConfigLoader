// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using ConfigLoader;
using ConfigLoader.Attributes;
using ConfigLoader.Exceptions;
using ConfigLoader.Utils;
using UnityEngine;

namespace ConfigLoaderTest
{
    public partial class TestConfig : IGeneratedConfigNode
    {
        /// <summary>
        /// Auto-generated <see cref="ConfigNode"/> load
        /// </summary>
        /// <param name="node"><see cref="ConfigNode"/> to load from</param>
        public void LoadFromConfig(ConfigNode node)
        {
            if (node == null)
            {
                return;
            }

            HashSet<string> required = new HashSet<string>(3);
            List<int> intArrayCollector = new List<int>();
            List<int> intListCollector = new List<int>();
            List<string> stringHashSetCollector = new List<string>();
            int valueCount = node.CountValues;
            for (int i = 0; i < valueCount; i++)
            {
                ConfigNode.Value value = node.values[i];
                switch (value.name)
                {
                    case "intValue":
                    {
                        if (ParseUtils.TryParse(value.value, out int _intValue, ParseOptions.Defaults))
                        {
                            this.intValue = _intValue;
                        }

                        break;
                    }

                    case "floatValue":
                    {
                        if (ParseUtils.TryParse(value.value, out float _floatValue, ParseOptions.Defaults))
                        {
                            this.floatValue = _floatValue;
                        }

                        break;
                    }

                    case "stringValue":
                    {
                        if (!string.IsNullOrEmpty(value.value))
                        {
                            this.stringValue = value.value;
                            required.Add("stringValue");
                        }

                        break;
                    }

                    case "modifier":
                    {
                        if (ParseUtils.TryParse(value.value, out AccessModifier _modifier, new ParseOptions(EnumHandling: EnumHandling.Flags)))
                        {
                            this.modifier = _modifier;
                        }

                        break;
                    }

                    case "intArray":
                    {
                        if (ParseUtils.TryParse(value.value, out int _intArray, ParseOptions.Defaults))
                        {
                            intArrayCollector.Add(_intArray);
                        }

                        break;
                    }

                    case "intList":
                    {
                        if (ParseUtils.TryParse(value.value, out int _intList, new ParseOptions(CollectionSeparator: ',')))
                        {
                            intListCollector.Add(_intList);
                        }

                        break;
                    }

                    case "stringHashSet":
                    {
                        if (ParseUtils.TryParse(value.value, out string _stringHashSet, ParseOptions.Defaults))
                        {
                            stringHashSetCollector.Add(_stringHashSet);
                        }

                        break;
                    }

                    case "longLinkedList":
                    {
                        if (ParseUtils.TryParse(value.value, out LinkedList<long> _longLinkedList, ParseUtils.TryParse, ParseOptions.Defaults))
                        {
                            this.longLinkedList = _longLinkedList;
                        }

                        break;
                    }

                    case "objectQueue":
                    {
                        if (ParseUtils.TryParse(value.value, out Queue<object> _objectQueue, ParseUtils.TryParse, ParseOptions.Defaults))
                        {
                            this.objectQueue = _objectQueue;
                        }

                        break;
                    }

                    case "charStack":
                    {
                        if (ParseUtils.TryParse(value.value, out Stack<char> _charStack, ParseUtils.TryParse, ParseOptions.Defaults))
                        {
                            this.charStack = _charStack;
                        }

                        break;
                    }

                    case "doubleReadOnlyCollection":
                    {
                        if (ParseUtils.TryParse(value.value, out ReadOnlyCollection<double> _doubleReadOnlyCollection, ParseUtils.TryParse, ParseOptions.Defaults))
                        {
                            this.doubleReadOnlyCollection = _doubleReadOnlyCollection;
                        }

                        break;
                    }

                    case "stringDecimalDictionary":
                    {
                        if (ParseUtils.TryParse(value.value, out Dictionary<string, decimal> _stringDecimalDictionary, ParseUtils.TryParse, ParseUtils.TryParse, new ParseOptions(KeyValueSeparator: '|')))
                        {
                            this.stringDecimalDictionary = _stringDecimalDictionary;
                        }

                        break;
                    }

                    case "OtherName":
                    {
                        if (ParseUtils.TryParse(value.value, out Vector3 _VectorProperty, new ParseOptions(SplitOptions: ExtendedSplitOptions.RemoveEmptyEntries, ValueSeparator: ' ')))
                        {
                            this.VectorProperty = _VectorProperty;
                            required.Add("VectorProperty");
                        }

                        break;
                    }
                }
            }

            if (intArrayCollector.Count != 0)
            {
                this.intArray = intArrayCollector.ToArray();
            }

            if (intListCollector.Count != 0)
            {
                this.intList = intListCollector;
                required.Add("intList");
            }

            if (stringHashSetCollector.Count != 0)
            {
                this.stringHashSet = new HashSet<string>(stringHashSetCollector);
            }

            if (required.Count != 3)
            {
                if (!required.Contains("stringValue"))
                    throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "stringValue");
                if (!required.Contains("intList"))
                    throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "intList");
                if (!required.Contains("VectorProperty"))
                    throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "VectorProperty");
            }

            required.Clear();
            int nodeCount = node.CountNodes;
            for (int i = 0; i < nodeCount; i++)
            {
                ConfigNode value = node.nodes[i];
                switch (value.name)
                {
                    case "floatCurve":
                    {
                        this.floatCurve = new FloatCurve();
                        this.floatCurve.Load(value);
                        required.Add("floatCurve");
                        break;
                    }

                    case "explicitImplementation":
                    {
                        this.explicitImplementation = new ConfigTest();
                        ((IConfigNode)this.explicitImplementation).Load(value);
                        break;
                    }

                    case "configNode":
                    {
                        this.configNode = value;
                        break;
                    }
                }
            }

            if (required.Count != 1)
            {
                if (!required.Contains("floatCurve"))
                    throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "floatCurve");
            }
        }

        /// <summary>
        /// Auto-generated <see cref="ConfigNode"/> save
        /// </summary>
        /// <param name="node"><see cref="ConfigNode"/> to save to</param>
        public void SaveToConfig(ConfigNode node)
        {
            if (node == null)
            {
                return;
            }

            if (this.stringValue == null)
                throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "stringValue");
            if (this.intList == null)
                throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "intList");
            if (this.floatCurve == null)
                throw new MissingRequiredConfigFieldException("ConfigField marked as missing could not be loaded", "floatCurve");
            node.AddValue("intValue", WriteUtils.Write(this.intValue, WriteOptions.Defaults));
            node.AddValue("floatValue", WriteUtils.Write(this.floatValue, WriteOptions.Defaults));
            node.AddValue("stringValue", WriteUtils.Write(this.stringValue, WriteOptions.Defaults));
            node.AddValue("modifier", WriteUtils.Write(this.modifier, new WriteOptions(EnumHandling: EnumHandling.Flags)));
            if (this.intArray != null)
            {
                for (int i = 0; i < this.intArray.Length; i++)
                {
                    int value = this.intArray[i];
                    node.AddValue("intArray", WriteUtils.Write(value, WriteOptions.Defaults));
                }
            }

            foreach (int value in this.intList)
            {
                node.AddValue("intList", WriteUtils.Write(value, new WriteOptions(CollectionSeparator: ',')));
            }

            if (this.stringHashSet != null)
            {
                foreach (string value in this.stringHashSet)
                {
                    node.AddValue("stringHashSet", WriteUtils.Write(value, WriteOptions.Defaults));
                }
            }

            if (this.longLinkedList != null)
            {
                node.AddValue("longLinkedList", WriteUtils.Write(this.longLinkedList, WriteUtils.Write, WriteOptions.Defaults));
            }

            if (this.objectQueue != null)
            {
                node.AddValue("objectQueue", WriteUtils.Write(this.objectQueue, WriteUtils.Write, WriteOptions.Defaults));
            }

            if (this.charStack != null)
            {
                node.AddValue("charStack", WriteUtils.Write(this.charStack, WriteUtils.Write, WriteOptions.Defaults));
            }

            if (this.doubleReadOnlyCollection != null)
            {
                node.AddValue("doubleReadOnlyCollection", WriteUtils.Write(this.doubleReadOnlyCollection, WriteUtils.Write, WriteOptions.Defaults));
            }

            if (this.stringDecimalDictionary != null)
            {
                node.AddValue("stringDecimalDictionary", WriteUtils.Write(this.stringDecimalDictionary, WriteUtils.Write, WriteUtils.Write, new WriteOptions(KeyValueSeparator: '|')));
            }

            node.AddValue("OtherName", WriteUtils.Write(this.VectorProperty, new WriteOptions(ValueSeparator: ' ')));
            this.floatCurve.Save(node.AddNode("floatCurve"));
            ((IConfigNode)this.explicitImplementation).Save(node.AddNode("explicitImplementation"));
            if (this.configNode != null)
            {
                node.AddNode("configNode", this.configNode);
            }
        }

#region IConfigNode Implementation
        void IConfigNode.Load(ConfigNode node)
        {
            LoadFromConfig(node);
        }

        void IConfigNode.Save(ConfigNode node)
        {
            SaveToConfig(node);
        }
#endregion
    }
}
